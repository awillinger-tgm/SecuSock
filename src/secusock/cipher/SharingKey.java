package secusock.cipher;

import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.spec.X509EncodedKeySpec;
import java.util.Base64;
import java.util.Base64.Decoder;
import java.util.Base64.Encoder;

import javax.crypto.Cipher;

/**
 * This class supplies methods for for generating and using RSA KeyPairs.
 * It is being used to encrypt AES SecretKeys generated by SessionKey.java.
 * 
 * @author Andreas Willinger
 * @version 20150128.1
 */
public class SharingKey
{
	/**
	 * Generates a new RSA KeyPair with a key size of 1024 bit.
	 * 
	 * @return A KeyPair instances contaning the generated public/private keys.
	 * @throws NoSuchAlgorithmException Algorithm is unknown
	 */
	public static KeyPair generateKeyPair() throws NoSuchAlgorithmException
	{
		KeyPairGenerator generator = KeyPairGenerator.getInstance("RSA");
		generator.initialize(1024);
		
		return generator.genKeyPair();
	}
	
	/**
	 * Takes the public key of the supplied KeyPair and encodes it into a Base64 String.
	 * 
	 * @param keyPair The KeyPair of which the public key should be encoded.
	 * @return A Base64 String of the public key
	 * @throws Exception KeyPair is invalid/null
	 */
	public static String encodePublicKey(KeyPair keyPair) throws Exception
	{
		byte[] publicKey = keyPair.getPublic().getEncoded();
		
		Encoder encoder = Base64.getEncoder();
		return encoder.encodeToString(publicKey);
	}
	
	/**
	 * Turns a previously encoded public key String back into a PublicKey instance.
	 * 
	 * @param givenKey The Base64 representation of the PublicKey to decode.
	 * @return A PublicKey instance containing the supplied public key
	 * @throws Exception Unknown algorithm, NullPointer
	 */
	public static PublicKey decodePublicKey(String givenKey) throws Exception
	{
		Decoder decoder = Base64.getDecoder();
		byte[] publicKey = decoder.decode(givenKey);
		
		X509EncodedKeySpec spec = new X509EncodedKeySpec(publicKey);
		KeyFactory keyFactory = KeyFactory.getInstance("RSA");
		
		return keyFactory.generatePublic(spec);
	}
	
	/**
	 * Encrypts the given byte array using the supplied public key and the RSA algorithm.
	 * 
	 * @param publicKey The public key which should be used for encryption
	 * @param message The byte array to be used (in this case, a RSA key)
	 * @return The ciphered message in a Base64 representation.
	 * @throws Exception Unknown algorithm, NullPointer, invalid key size
	 */
	public static String encrypt(PublicKey publicKey, byte[] message) throws Exception
	{
		byte[] cipherText = null;
		
		Cipher cipher = Cipher.getInstance("RSA");
		cipher.init(Cipher.ENCRYPT_MODE, publicKey);
		cipherText = cipher.doFinal(message);
		
		Encoder encoder = Base64.getEncoder();		
		return encoder.encodeToString(cipherText);
	}
	
	/**
	 * Decrypts the given cipherMessage using the supplied RSA private key.
	 * 
	 * @param privateKey The privaate key which should be use for decryption
	 * @param cipherMessage The encrypted message which should be decrypted.
	 * @return The decrypted message, as a byte array
	 * @throws Exception Unknown algorithm, NullPointer, invalid key size
	 */
	public static byte[] decrypt(PrivateKey privateKey, String cipherMessage) throws Exception
	{
		byte[] decrypted = null;
		
		Cipher cipher = Cipher.getInstance("RSA");
		cipher.init(Cipher.DECRYPT_MODE, privateKey);
		
		Decoder decoder = Base64.getDecoder();
		decrypted = cipher.doFinal(decoder.decode(cipherMessage));
		
		return decrypted;
	}
}